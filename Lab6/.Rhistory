library("neuralnet")
#Going to create a neural network to perform prediction
#Type ?neuralnet for more information on the neuralnet library
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Matryca+JasnoscEkranu+CzasReakcji, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28,
206, 75, 16,
361, 56, 20), nrow=3, ncol=3))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
#Lets see what properties net.price has
ls(net.results)
#Lets see the results
print(net.results$net.result)
library("neuralnet")
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
library("neuralnet")
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Matryca+JasnoscEkranu+CzasReakcji, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
library("neuralnet")
#Going to create a neural network to perform prediction
#Type ?neuralnet for more information on the neuralnet library
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28,
206, 75, 16,
361, 56, 20), nrow=3, ncol=3))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
#Lets see what properties net.price has
ls(net.results)
#Lets see the results
print(net.results$net.result)
library("neuralnet")
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28,
206, 75, 16,
361, 56, 20), nrow=3, ncol=3))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
library("neuralnet")
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28, 16,
206, 75, 16, 25,
361, 56, 20, 15), nrow=3, ncol=4))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
library("neuralnet")
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28, 16,
206, 75, 16, 25,
361, 56, 20, 15), nrow=3, ncol=4))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:4], scale=maxs[1:4]-mins[1:4]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
#Lets see what properties net.price has
ls(net.results)
library("neuralnet")
#Going to create a neural network to perform prediction
#Type ?neuralnet for more information on the neuralnet library
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28,
206, 75, 16,
361, 56, 20), nrow=3, ncol=3))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:4], scale=maxs[1:4]-mins[1:4]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
#Lets see what properties net.price has
ls(net.results)
#Lets see the results
print(net.results$net.result)
library("neuralnet")
#Going to create a neural network to perform prediction
#Type ?neuralnet for more information on the neuralnet library
#Generate training data
#And store them as a dataframe
traininginput <- as.data.frame(matrix(c(5, 2, 16, 8,
5.2, 2, 16, 13,
5.5, 3, 32, 16,
5.3, 4, 64, 13),
nrow=4, ncol=4))
trainingoutput <- c(449, 649, 829, 1899)
#Column bind the data into one variable
trainingdata <- cbind(traininginput, trainingoutput)
# Create Vector of Column Max and Min Values
maxs <- apply(trainingdata[,], 2, max)
mins <- apply(trainingdata[,], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
trainingdata <- scaled.trainingdata
# Check out results
print(head(trainingdata, 10))
colnames(trainingdata) <- c("Wyswietlacz", "RAM", "ROM", "Aparat", "Cena")
print(trainingdata)
#Train the neural network
#Going to have C(5, 4, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.price <- neuralnet(Cena~Wyswietlacz+RAM+ROM+Aparat, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
print(net.price)
#Plot the neural network
plot(net.price)
#Test the neural network on some training data
testdata <- as.data.frame(matrix(c(262, 64, 28, 16,
206, 75, 16, 25,
361, 56, 20, 15), nrow=3, ncol=4))
scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:4], scale=maxs[1:4]-mins[1:4]))
net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
#Lets see what properties net.price has
ls(net.results)
#Lets see the results
print(net.results$net.result)
